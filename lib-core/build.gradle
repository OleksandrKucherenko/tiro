//region imports
import javax.xml.XMLConstants
import javax.xml.transform.stream.StreamSource
import javax.xml.validation.SchemaFactory

//endregion

apply plugin: 'java'

// we will use lambda
sourceCompatibility = '1.8'
targetCompatibility = '1.8'
archivesBaseName = "lib-core-${APP_VERSION}"

compileJava.options.encoding = 'UTF-8'

dependencies {
  /* [ RELEASE ] ==================================================================================================== */
  /* SLF4J + Logback + log4j-over-slf4j + jul-to-slf4j */
  compile 'org.slf4j:slf4j-api:+',
      'org.slf4j:log4j-over-slf4j:+',
      'org.slf4j:jcl-over-slf4j:+',
      'org.slf4j:jul-to-slf4j:+'

  /* Logback */
  compile 'ch.qos.logback:logback-classic:+'

  /* JPA implementation */
  // ALTERNATIVES: compile 'javax:javaee-api:+' OR compile 'javax.persistence:persistence-api:+'
  compile 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:+'

  /* FindBugs Annotations */
  compile 'com.google.code.findbugs:jsr305:+'

  /* Jackson JSON Annotations */
  compile 'com.fasterxml.jackson.core:jackson-annotations:+'

  /* Hibernate */
  compile 'org.hibernate:hibernate-entitymanager:+'

  /* [ TESTING ] ==================================================================================================== */
  if (useTdd) {

    testCompile project(':lib-sqlite-dialect')

    /* SQLite */
    testCompile 'org.xerial:sqlite-jdbc:+'

    /* Unit Testing Frameworks */
    testCompile 'junit:junit:+'
    testCompile 'org.mockito:mockito-core:+'
    testCompile 'org.assertj:assertj-core:+'

    /* Reflection utilities */
    testCompile('org.reflections:reflections:+') {
      exclude group: 'com.google.code.findbugs', module: 'annotations'
    }

    /* Pretty time printing for test reports */
    testCompile 'org.ocpsoft.prettytime:prettytime:+'
  }
}

jar {
  manifest {
    attributes("Implementation-Title": "Core",
        "Implementation-Version": "${APP_VERSION}")
  }

  /* Remove GIT empty folder .placeholder files from final binary. */
  exclude('**/.placeholder')
}

/* [ UNIT TESTING ] ================================================================================================= */

tasks.compileTestJava.onlyIf { useTdd }
test.onlyIf { useTdd }

if (useJacoco) {
  apply plugin: 'jacoco'

  jacoco {
    toolVersion = '+'
  }

  test {
    jacoco {
      // change extension from *.exec to *.ec, otherwise codecov.io will not find the results
      destinationFile = file("$rootProject.buildDir/jacoco/lib-core-jacoco.ec")
    }
  }

  jacocoTestReport {
    reports {
      xml.enabled true
    }
  }
}

test {
  /* Print tests results to the output */
  testLogging {
    // set options for log level LIFECYCLE
    events "failed", "passed"

    // set options for log level DEBUG
    debug.events "failed", "passed", "skipped", "standardError", "standardOut", "started"

    // set options for log level INFO
    info.events = ["failed", "passed", "skipped"]


  }

  /* Disable separated test reports, we use aggregated */
  reports {
    html.enabled = false
  }

  /* Time reporting for each test. */
  if (false) {
    Map<Object, Long> tracker = new HashMap<>();
    beforeTest { descriptor ->
      tracker.put(descriptor, System.nanoTime())
    }

    afterTest { descriptor ->
      def time = (System.nanoTime() - tracker.get(descriptor)) / 1000.0 / 1000.0;
      logger.lifecycle('')
      logger.lifecycle("" + descriptor + " takes: " + time + "ms")
    }
  }
}

/* [ VALIDATIONS ] ================================================================================================== */

/** Convert file system path to URL. */
def fileToUrl(def filePath) {
  return new File(filePath).toURI().toURL();
}

/** Validate XML with specific XSD scheme. */
def validateXml(def xmlUrl, def xsdUrl) {
  new URL("${xsdUrl}").withInputStream { xsd ->
    new URL("${xmlUrl}").withInputStream { xml ->
      SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI)
          .newSchema(new StreamSource(xsd))
          .newValidator()
          .validate(new StreamSource(xml))
    }
  }
}

/** Validate persistence.xml file against standard (XSD schema). */
task checkPersistenceXml {
  group 'verification'
  description 'Check persistence.xml file against the validation schema.'

  def xmlUrl = fileToUrl("${project.projectDir}/src/main/resources/META-INF/persistence.xml")
  def xsdUrl = fileToUrl("${rootProject.projectDir}/gradle/schemas/persistence_2_0.xsd")

  validateXml(xmlUrl, xsdUrl)
}

/* Check task should include XML validation as a dependency. */
check.dependsOn checkPersistenceXml
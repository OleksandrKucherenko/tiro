/* CONNECT PLUGINS */
buildscript {
  repositories {
    jcenter()
  }
  /* PLUGINS DEPENDENCIES. */
  dependencies {
    /* WEB SERVER INTEGRATION */
    classpath 'org.akhikhl.gretty:gretty:+'
    /* DEPENDENCIES UPDATES REPORTS */
    classpath 'com.github.ben-manes:gradle-versions-plugin:+'
    /* RECORD TIME OF TASKS EXECUTION, https://github.com/passy/build-time-tracker-plugin */
    if (Boolean.parseBoolean(project.BUILD_TIMING_TRACKING)) {
      classpath "net.rdrei.android.buildtimetracker:gradle-plugin:+"
    }
  }
}

apply plugin: 'org.akhikhl.gretty'
apply plugin: 'com.github.ben-manes.versions'

if (Boolean.parseBoolean(project.BUILD_TIMING_TRACKING)) {
  apply plugin: "build-time-tracker"
}

/** Get GIT revision unique number. */
def gitRevision() {
  return "git rev-list --count HEAD".execute().text.trim();
}

/** Get GIT Branch name. */
def gitBranch() {
  return "git rev-parse --abbrev-ref HEAD".execute().text.trim();
}

/* GLOBAL configuration for ALL PROJECTS/MODULES */
allprojects {
  /* Use local maven repository before the jcenter or maven-central. */
  repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
  }

  /* PUBLISH GLOBAL VARIABLES FOR ALL SUB-PROJECTS */
  ext {
    GIT_REVISION = "${gitRevision()}"
    GIT_BRANCH = "${gitBranch()}"

    if (0 == GIT_REVISION.length()) {
      GIT_REVISION = '0'
    }

    APP_MAJOR = "${project.SOLUTION_VERSION_MAJOR}"
    APP_MINOR = "${project.SOLUTION_VERSION_MINOR}"
    APP_VERSION = "$APP_MAJOR.$APP_MINOR.$GIT_REVISION"

    useTdd = Boolean.parseBoolean("${project.USE_TDD}")
    useJacoco = USE_TDD && Boolean.parseBoolean("${project.USE_JACOCO}")
  }

  /* Update Java compiler options for making visible all warnings. */
  tasks.withType(JavaCompile) {
    configure(options) {
      compilerArgs << '-Xlint:all' << '-Xlint:-options'
      deprecation = true
      encoding = 'UTF-8'
    }
  }

  /* Exclude SLF4J 'nop' implementation from dependencies. We will use logback. */
  configurations {
    all*.exclude group: 'org.slf4j', module: 'slf4j-nop'
  }

  /* Force Jetty dependencies be upgraded to latest version */
  def grettyResolutionStrategy = { DependencyResolveDetails details ->
    if (details.requested.group == 'org.eclipse.jetty' ||
        details.requested.group == 'org.eclipse.jetty.websocket') {
      details.useVersion "${project.JETTY_VERSION}"
    }

  }

  /* Upgrade jetty 9 to latest release. instead of v9.2 use v9.3 */
  afterEvaluate { project ->
    /* Exclude old JSP module from dependencies, force upgrade to latest version */
    project.configurations {
      grettyRunnerJetty9 {
        exclude group: 'org.eclipse.jetty', module: 'jetty-jsp'

        resolutionStrategy.eachDependency(grettyResolutionStrategy)
      }
    }

    /* Include new JSP apache module */
    project.dependencies {
      grettyRunnerJetty9 'org.eclipse.jetty:apache-jsp:+'
    }
  }
}

/* CLEANUP ROOT PROJECT TOO. */
task clean(type: Delete) {
  delete rootProject.buildDir
  //delete fileTree(dir: rootProject.rootDir, include: '**/*.log')
}

/* BUILD TASKS EXECUTION TIME TRACKING */
if (Boolean.parseBoolean(project.BUILD_TIMING_TRACKING)) {
  buildtimetracker {
    reporters {
      csv {
        output "build/times.csv"
        append true
        header false
      }

      summary {
        ordered false
        threshold 50
        barstyle "none" /* unicode | ascii | none */
      }

      csvSummary {
        csv "build/times.csv"
      }
    }
  }
}

/* DEFINE SERVER CONFIGURATION FILES */
gretty {
  /* Jetty v9.3 requires proper configuration for making possible JSP running.
      Take a look into 'allprojects' scope upper. */
  servletContainer 'jetty9'
  serverConfigFile "${rootProject.projectDir}/gradle/configuration/jetty.xml"

  /* Tomcat8 is properly configured for JSP from the beginning, just run and enjoy! */
  //  servletContainer 'tomcat8'
}

/* CREATE A FARM FOR EXECUTING MULTIPLE WAR FILES */
farms {
  farm 'Server', {
    port = 9191
    servicePort = 9090

    webapp project(':war-time')
    webapp project(':war-tasks')
    webapp project(':war-api')
  }
}

/**
 * http://akhikhl.github.io/gretty-doc/Farm-tasks.html
 *
 * Run Server on Local Machine:
 *  > ./gradlew farmRunServer
 *
 * Compile EAR (Enterprise ARchive):
 *  > ./gradlew ear
 *
 * Get EAR file content list:
 *  > zipinfo -1 ear-app/build/libs/ear-app.ear
 *  > zipinfo -1 war-tasks/build/libs/war-tasks.war
 *  > zipinfo -1 war-time/build/libs/war-time.war
 *
 * Debug Server:
 *  > ./gradlew farmRunDebugServer
 *
 * Deployment:
 *  > ./gradlew buildProduct
 *
 * */